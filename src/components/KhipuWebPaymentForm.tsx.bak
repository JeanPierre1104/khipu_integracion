'use client';

import React, { useState, useEffect } from 'react';
import BankValidator from './BankValidator';
import type { KhipuWebResult } from '@/types/khipu-web';

interface FormData {
    amount: string;
    email: string;
    subject: string;
    description: string;
}

export default function KhipuWebPaymentForm() {
    const [loading, setLoading] = useState<boolean>(false);
    const [error, setError] = useState<string>('');
    const [success, setSuccess] = useState<boolean>(false);
    const [paymentResult, setPaymentResult] = useState<KhipuWebResult | null>(null);
    const [formData, setFormData] = useState<FormData>({
        amount: '',
        email: '',
        subject: '',
        description: ''
    });

    useEffect(() => {
        // Log para confirmar que el componente ya no depende del SDK
        console.log('‚úÖ Componente de pago configurado para redirecci√≥n directa (sin SDK)');
    }, []);

    const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {
        e.preventDefault();
        console.log('üéØ Form submitted, starting payment process...');
        
        setLoading(true);
        setError('');
        setSuccess(false);
        setPaymentResult(null);

        try {
            const amount = parseInt(formData.amount);
            
            // Validaci√≥n espec√≠fica para la prueba t√©cnica de Khipu
            if (isNaN(amount) || amount < 100) {
                throw new Error('El monto m√≠nimo es $100 CLP');
            }
            
            if (amount > 5000) {
                throw new Error('L√≠mite m√°ximo de $5.000 CLP para DemoBank (requisito de la prueba t√©cnica)');
            }

            console.log('üöÄ Creando pago con datos:', formData);

            // Paso 1: Crear el pago usando nuestra API
            const requestBody = {
                amount: amount,
                currency: 'CLP',
                subject: formData.subject,
                body: formData.description,
                payer_email: formData.email,
                return_url: `${window.location.origin}/payment/success`,
                cancel_url: `${window.location.origin}/payment/cancelled`,
                notify_url: `${window.location.origin}/api/notify`
            };
            
            console.log('üì° Enviando request a API:', requestBody);

            const response = await fetch('/api/payments', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(requestBody),
            });

            console.log('üì® Response recibida, status:', response.status);
            const data = await response.json();
            console.log('üìã Data completa recibida:', data);

            if (!response.ok) {
                throw new Error(data.error || 'Error al procesar el pago');
            }

            console.log('‚úÖ Pago creado exitosamente:', data);
            
            // Paso 2: Redirigir directamente a la URL de pago (tanto para Khipu real como DemoBank)
            if (data.data && data.data.payment_url) {
                console.log('üéØ Redirigiendo a payment_url:', data.data.payment_url);
                console.log('üîç Tipo de payment_url:', typeof data.data.payment_url);
                console.log('üîç Longitud de payment_url:', data.data.payment_url.length);
                
                // Verificar si es un pago mock de DemoBank para logging
                if (data.data.payment_id && data.data.payment_id.startsWith('demo_')) {
                    console.log('üß™ Detectado pago DemoBank Mock - Redirigiendo a simulador');
                } else {
                    console.log('üè¶ Detectado pago Khipu real - Ejecutando redirecci√≥n autom√°tica');
                }
                
                // Verificar que la URL sea v√°lida y redirigir autom√°ticamente
                try {
                    const url = new URL(data.data.payment_url);
                    console.log('‚úÖ URL v√°lida, protocolo:', url.protocol, 'host:', url.host);
                    
                    // REDIRECCI√ìN AUTOM√ÅTICA INMEDIATA
                    console.log('üöÄ EJECUTANDO REDIRECCI√ìN AUTOM√ÅTICA AHORA...');
                    console.log('üåê Redirigiendo a:', data.data.payment_url);
                    
                    // Intentar m√∫ltiples m√©todos para asegurar la redirecci√≥n
                    try {
                        // M√©todo 1: window.location.href (m√°s compatible)
                        window.location.href = data.data.payment_url;
                    } catch (redirectError) {
                        console.error('‚ùå Error con window.location.href, probando alternativa:', redirectError);
                        try {
                            // M√©todo 2: window.location.replace
                            window.location.replace(data.data.payment_url);
                        } catch (replaceError) {
                            console.error('‚ùå Error con window.location.replace, probando window.open:', replaceError);
                            // M√©todo 3: window.open en la misma ventana
                            const newWindow = window.open(data.data.payment_url, '_self');
                            if (!newWindow) {
                                throw new Error('No se pudo redirigir - posible bloqueador de popups');
                            }
                        }
                    }
                    
                } catch (urlError) {
                    console.error('‚ùå URL inv√°lida:', urlError);
                    throw new Error('URL de pago inv√°lida recibida del servidor');
                }
            } else {
                console.error('‚ùå Estructura de respuesta inesperada:', data);
                throw new Error('No se recibi√≥ la URL de pago en la respuesta');
            }
            
        } catch (err: unknown) {
            console.error('‚ùå Error en pago:', err);
            setError(err instanceof Error ? err.message : 'Error al procesar el pago');
            setLoading(false);
        }
    };

    const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {
        const { name, value } = e.target;
        
        // Validaci√≥n especial para el campo amount
        if (name === 'amount') {
            const numValue = parseInt(value);
            // Limitar el valor m√°ximo a 5000
            if (!isNaN(numValue) && numValue > 5000) {
                return; // No actualizar si es mayor a 5000
            }
        }
        
        setFormData((prev: FormData) => ({
            ...prev,
            [name]: value
        }));
    };

    const restartPayment = () => {
        // Ya no necesitamos reiniciar el SDK, simplemente reseteamos el estado
        setLoading(false);
        setError('');
        setSuccess(false);
        setPaymentResult(null);
    };

    const closePayment = () => {
        // Ya no necesitamos cerrar el SDK, simplemente reseteamos el estado
        setLoading(false);
    };

    return (
        <div className="max-w-md mx-auto p-6 bg-white rounded-lg shadow-lg">
            <h2 className="text-2xl font-bold mb-6 text-center text-black">
                üí≥ Pago con Redirecci√≥n Directa
            </h2>
            
            {error && (
                <div className="mb-4 p-4 bg-red-50 border border-red-200 text-red-700 rounded-lg">
                    <div className="flex items-center justify-between">
                        <div className="flex items-center">
                            <span className="text-red-500 mr-2">‚ùå</span>
                            {error}
                        </div>
                        {loading && (
                            <button
                                onClick={closePayment}
                                className="ml-2 px-2 py-1 text-xs bg-red-600 text-white rounded hover:bg-red-700"
                            >
                                Cerrar
                            </button>
                        )}
                    </div>
                    {paymentResult?.failureReason && (
                        <p className="text-xs text-red-600 mt-2">
                            Raz√≥n: {paymentResult.failureReason}
                        </p>
                    )}
                </div>
            )}

            {success && paymentResult && (
                <div className="mb-4 p-4 bg-green-50 border border-green-200 text-green-700 rounded-lg">
                    <div className="flex items-center mb-2">
                        <span className="text-green-500 mr-2">‚úÖ</span>
                        {paymentResult.exitTitle}
                    </div>
                    <p className="text-sm text-green-600 mb-3">
                        {paymentResult.exitMessage}
                    </p>
                    {paymentResult.exitUrl && (
                        <a
                            href={paymentResult.exitUrl}
                            className="inline-block w-full py-2 px-4 bg-green-600 text-white text-center rounded-md hover:bg-green-700 transition-colors"
                        >
                            üîó Ir a p√°gina de confirmaci√≥n
                        </a>
                    )}
                </div>
            )}

            <form onSubmit={handleSubmit} className="space-y-4">
                <div>
                    <label htmlFor="amount" className="block text-sm font-medium text-black mb-1">
                        üí∞ Monto (CLP)
                    </label>
                    <input
                        type="number"
                        id="amount"
                        name="amount"
                        value={formData.amount}
                        onChange={handleChange}
                        className={`w-full px-3 py-2 border rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 text-black ${
                            formData.amount && (parseInt(formData.amount) < 100 || parseInt(formData.amount) > 5000)
                                ? 'border-red-300 bg-red-50'
                                : 'border-gray-300'
                        }`}
                        required
                        max="5000"
                        min="100"
                        placeholder="Entre $100 y $5.000 CLP"
                        disabled={loading}
                    />
                    
                    {/* Validaci√≥n en tiempo real */}
                    {formData.amount && parseInt(formData.amount) > 5000 && (
                        <div className="mt-1 p-2 bg-red-50 border border-red-200 rounded text-xs text-red-700">
                            <span className="font-medium">‚ùå Error:</span> El monto m√°ximo para DemoBank es $5.000 CLP
                        </div>
                    )}
                    
                    {formData.amount && parseInt(formData.amount) < 100 && parseInt(formData.amount) > 0 && (
                        <div className="mt-1 p-2 bg-yellow-50 border border-yellow-200 rounded text-xs text-yellow-700">
                            <span className="font-medium">‚ö†Ô∏è Atenci√≥n:</span> El monto m√≠nimo para DemoBank es $100 CLP
                        </div>
                    )}
                    
                    {(!formData.amount || (parseInt(formData.amount) >= 100 && parseInt(formData.amount) <= 5000)) && (
                        <div className="mt-1 p-2 bg-blue-50 border border-blue-200 rounded text-xs text-blue-700">
                            <span className="font-medium">‚úÖ DemoBank:</span> L√≠mite de $100 - $5.000 CLP (Prueba T√©cnica Khipu)
                        </div>
                    )}
                </div>

                <div>
                    <label htmlFor="email" className="block text-sm font-medium text-black mb-1">
                        üìß Email del pagador
                    </label>
                    <input
                        type="email"
                        id="email"
                        name="email"
                        value={formData.email}
                        onChange={handleChange}
                        className="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 text-black"
                        required
                        placeholder="correo@ejemplo.com"
                        disabled={loading}
                    />
                </div>

                <div>
                    <label htmlFor="subject" className="block text-sm font-medium text-black mb-1">
                        üìù Asunto del pago
                    </label>
                    <input
                        type="text"
                        id="subject"
                        name="subject"
                        value={formData.subject}
                        onChange={handleChange}
                        className="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 text-black"
                        required
                        placeholder="Ej: Compra de producto"
                        disabled={loading}
                    />
                </div>

                <div>
                    <label htmlFor="description" className="block text-sm font-medium text-black mb-1">
                        üìÑ Descripci√≥n (opcional)
                    </label>
                    <textarea
                        id="description"
                        name="description"
                        value={formData.description}
                        onChange={handleChange}
                        className="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 text-black"
                        rows={3}
                        placeholder="Descripci√≥n detallada del pago (opcional)"
                        disabled={loading}
                    />
                </div>

                {/* Componente de validaci√≥n de bancos */}
                <div className="pt-2 border-t border-gray-200">
                    <BankValidator amount={parseInt(formData.amount) || 0} />
                </div>

                <div className="flex space-x-2">
                    <button
                        type="submit"
                        disabled={loading || success}
                        className={`flex-1 py-3 px-4 rounded-md shadow-sm text-sm font-medium text-white transition-colors ${
                            loading || success
                                ? 'bg-gray-400 cursor-not-allowed'
                                : 'bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500'
                        }`}
                    >
                        {loading ? (
                            <span className="flex items-center justify-center">
                                <svg className="animate-spin -ml-1 mr-3 h-4 w-4 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                                    <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                                    <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                                </svg>
                                Procesando...
                            </span>
                        ) : success ? (
                            '‚úÖ Pago completado'
                        ) : (
                            'üîÑ Redirigir a Khipu'
                        )}
                    </button>

                    {loading && (
                        <button
                            type="button"
                            onClick={restartPayment}
                            className="px-4 py-3 bg-yellow-600 text-white rounded-md hover:bg-yellow-700 transition-colors"
                            title="Reiniciar pago"
                        >
                            üîÑ
                        </button>
                    )}
                </div>
            </form>

            {paymentResult && (
                <div className="mt-4 p-4 bg-blue-50 border border-blue-200 rounded-lg">
                    <h3 className="font-medium text-blue-900 mb-2">üìã Detalles del pago:</h3>
                    <ul className="text-sm text-blue-700 space-y-1">
                        <li>‚Ä¢ ID: {paymentResult.operationId}</li>
                        <li>‚Ä¢ Estado: {paymentResult.result}</li>
                        {paymentResult.continueUrl && (
                            <li>‚Ä¢ <a href={paymentResult.continueUrl} className="underline">Continuar pago</a></li>
                        )}
                    </ul>
                </div>
            )}
        </div>
    );
}
        e.preventDefault();
        console.log('üéØ Form submitted, starting payment process...');
        
        setLoading(true);
        setError('');
        setSuccess(false);
        setPaymentResult(null);

        try {
            const amount = parseInt(formData.amount);
            
            // Validaci√≥n espec√≠fica para la prueba t√©cnica de Khipu
            if (isNaN(amount) || amount < 100) {
                throw new Error('El monto m√≠nimo es $100 CLP');
            }
            
            if (amount > 5000) {
                throw new Error('L√≠mite m√°ximo de $5.000 CLP para DemoBank (requisito de la prueba t√©cnica)');
            }

            console.log('üöÄ Creando pago con datos:', formData);

            // Paso 1: Crear el pago usando nuestra API
            const requestBody = {
                amount: amount,
                currency: 'CLP',
                subject: formData.subject,
                body: formData.description,
                payer_email: formData.email,
                return_url: `${window.location.origin}/payment/success`,
                cancel_url: `${window.location.origin}/payment/cancelled`,
                notify_url: `${window.location.origin}/api/notify`
            };
            
            console.log('üì° Enviando request a API:', requestBody);

            const response = await fetch('/api/payments', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(requestBody),
            });

            console.log('üì® Response recibida, status:', response.status);
            const data = await response.json();
            console.log('üìã Data completa recibida:', data);

            if (!response.ok) {
                throw new Error(data.error || 'Error al procesar el pago');
            }            console.log('‚úÖ Pago creado exitosamente:', data);
            
            // Paso 2: Redirigir directamente a la URL de pago (tanto para Khipu real como DemoBank)
            if (data.data && data.data.payment_url) {
                console.log('üéØ Redirigiendo a payment_url:', data.data.payment_url);
                console.log('üîç Tipo de payment_url:', typeof data.data.payment_url);
                console.log('üîç Longitud de payment_url:', data.data.payment_url.length);
                
                // Verificar si es un pago mock de DemoBank para logging
                if (data.data.payment_id && data.data.payment_id.startsWith('demo_')) {
                    console.log('üß™ Detectado pago DemoBank Mock - Redirigiendo a simulador');                } else {
                    console.log('üè¶ Detectado pago Khipu real - Ejecutando redirecci√≥n autom√°tica');
                }
                
                // Verificar que la URL sea v√°lida y redirigir autom√°ticamente
                try {
                    const url = new URL(data.data.payment_url);
                    console.log('‚úÖ URL v√°lida, protocolo:', url.protocol, 'host:', url.host);
                      // REDIRECCI√ìN AUTOM√ÅTICA INMEDIATA
                    console.log('üöÄ EJECUTANDO REDIRECCI√ìN AUTOM√ÅTICA AHORA...');
                    console.log('üåê Redirigiendo a:', data.data.payment_url);
                    
                    // Intentar m√∫ltiples m√©todos para asegurar la redirecci√≥n
                    try {
                        // M√©todo 1: window.location.href (m√°s compatible)
                        window.location.href = data.data.payment_url;
                    } catch (redirectError) {
                        console.error('‚ùå Error con window.location.href, probando alternativa:', redirectError);
                        try {
                            // M√©todo 2: window.location.replace
                            window.location.replace(data.data.payment_url);
                        } catch (replaceError) {
                            console.error('‚ùå Error con window.location.replace, probando window.open:', replaceError);
                            // M√©todo 3: window.open en la misma ventana
                            const newWindow = window.open(data.data.payment_url, '_self');
                            if (!newWindow) {
                                throw new Error('No se pudo redirigir - posible bloqueador de popups');
                            }
                        }
                    }
                    
                } catch (urlError) {
                    console.error('‚ùå URL inv√°lida:', urlError);
                    throw new Error('URL de pago inv√°lida recibida del servidor');
                }
            } else {
                console.error('‚ùå Estructura de respuesta inesperada:', data);
                throw new Error('No se recibi√≥ la URL de pago en la respuesta');
            }
            
        } catch (err: unknown) {
            console.error('‚ùå Error en pago:', err);
            setError(err instanceof Error ? err.message : 'Error al procesar el pago');
            setLoading(false);
        }
    };const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {
        const { name, value } = e.target;
        
        // Validaci√≥n especial para el campo amount
        if (name === 'amount') {
            const numValue = parseInt(value);
            // Limitar el valor m√°ximo a 5000
            if (!isNaN(numValue) && numValue > 5000) {
                return; // No actualizar si es mayor a 5000
            }
        }
        
        setFormData(prev => ({
            ...prev,
            [name]: value
        }));
    };    const restartPayment = () => {
        // Ya no necesitamos reiniciar el SDK, simplemente reseteamos el estado        setLoading(false);
        setError('');
        setSuccess(false);
        setPaymentResult(null);
    };    const closePayment = () => {
        // Ya no necesitamos cerrar el SDK, simplemente reseteamos el estado
        setLoading(false);
    };    return (        <div className="max-w-md mx-auto p-6 bg-white rounded-lg shadow-lg">
            <h2 className="text-2xl font-bold mb-6 text-center text-black">
                üí≥ Pago con Redirecci√≥n Directa
            </h2>
            
            {error && (
                <div className="mb-4 p-4 bg-red-50 border border-red-200 text-red-700 rounded-lg">
                    <div className="flex items-center justify-between">
                        <div className="flex items-center">
                            <span className="text-red-500 mr-2">‚ùå</span>
                            {error}
                        </div>
                        {loading && (
                            <button
                                onClick={closePayment}
                                className="ml-2 px-2 py-1 text-xs bg-red-600 text-white rounded hover:bg-red-700"
                            >
                                Cerrar
                            </button>
                        )}
                    </div>
                    {paymentResult?.failureReason && (
                        <p className="text-xs text-red-600 mt-2">
                            Raz√≥n: {paymentResult.failureReason}
                        </p>
                    )}
                </div>
            )}

            {success && paymentResult && (
                <div className="mb-4 p-4 bg-green-50 border border-green-200 text-green-700 rounded-lg">
                    <div className="flex items-center mb-2">
                        <span className="text-green-500 mr-2">‚úÖ</span>
                        {paymentResult.exitTitle}
                    </div>
                    <p className="text-sm text-green-600 mb-3">
                        {paymentResult.exitMessage}
                    </p>
                    {paymentResult.exitUrl && (
                        <a
                            href={paymentResult.exitUrl}
                            className="inline-block w-full py-2 px-4 bg-green-600 text-white text-center rounded-md hover:bg-green-700 transition-colors"
                        >
                            üîó Ir a p√°gina de confirmaci√≥n
                        </a>
                    )}
                </div>            )}

            <form onSubmit={handleSubmit} className="space-y-4">                <div>
                    <label htmlFor="amount" className="block text-sm font-medium text-black mb-1">
                        üí∞ Monto (CLP)
                    </label>                    <input
                        type="number"
                        id="amount"
                        name="amount"
                        value={formData.amount}
                        onChange={handleChange}
                        className={`w-full px-3 py-2 border rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 text-black ${
                            formData.amount && (parseInt(formData.amount) < 100 || parseInt(formData.amount) > 5000)
                                ? 'border-red-300 bg-red-50'
                                : 'border-gray-300'
                        }`}
                        required
                        max="5000"
                        min="100"
                        placeholder="Entre $100 y $5.000 CLP"
                        disabled={loading}
                    />
                    
                    {/* Validaci√≥n en tiempo real */}
                    {formData.amount && parseInt(formData.amount) > 5000 && (
                        <div className="mt-1 p-2 bg-red-50 border border-red-200 rounded text-xs text-red-700">
                            <span className="font-medium">‚ùå Error:</span> El monto m√°ximo para DemoBank es $5.000 CLP
                        </div>
                    )}
                    
                    {formData.amount && parseInt(formData.amount) < 100 && parseInt(formData.amount) > 0 && (
                        <div className="mt-1 p-2 bg-yellow-50 border border-yellow-200 rounded text-xs text-yellow-700">
                            <span className="font-medium">‚ö†Ô∏è Atenci√≥n:</span> El monto m√≠nimo para DemoBank es $100 CLP
                        </div>
                    )}
                    
                    {(!formData.amount || (parseInt(formData.amount) >= 100 && parseInt(formData.amount) <= 5000)) && (
                        <div className="mt-1 p-2 bg-blue-50 border border-blue-200 rounded text-xs text-blue-700">
                            <span className="font-medium">‚úÖ DemoBank:</span> L√≠mite de $100 - $5.000 CLP (Prueba T√©cnica Khipu)
                        </div>
                    )}
                </div>                <div>
                    <label htmlFor="email" className="block text-sm font-medium text-black mb-1">
                        üìß Email del pagador
                    </label>                    <input
                        type="email"
                        id="email"
                        name="email"
                        value={formData.email}
                        onChange={handleChange}
                        className="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 text-black"
                        required
                        placeholder="correo@ejemplo.com"
                        disabled={loading}
                    />
                </div>                <div>
                    <label htmlFor="subject" className="block text-sm font-medium text-black mb-1">
                        üìù Asunto del pago
                    </label>                    <input
                        type="text"
                        id="subject"
                        name="subject"
                        value={formData.subject}
                        onChange={handleChange}
                        className="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 text-black"
                        required
                        placeholder="Ej: Compra de producto"
                        disabled={loading}
                    />
                </div>                <div>
                    <label htmlFor="description" className="block text-sm font-medium text-black mb-1">
                        üìÑ Descripci√≥n (opcional)
                    </label>                    <textarea
                        id="description"
                        name="description"
                        value={formData.description}
                        onChange={handleChange}
                        className="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 text-black"
                        rows={3}
                        placeholder="Descripci√≥n detallada del pago (opcional)"
                        disabled={loading}
                    />
                </div>                {/* Componente de validaci√≥n de bancos */}
                <div className="pt-2 border-t border-gray-200">
                    <BankValidator amount={parseInt(formData.amount) || 0} />
                </div>

                <div className="flex space-x-2">
                    <button
                        type="submit"
                        disabled={loading || success}
                        className={`flex-1 py-3 px-4 rounded-md shadow-sm text-sm font-medium text-white transition-colors ${
                            loading || success
                                ? 'bg-gray-400 cursor-not-allowed'
                                : 'bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500'
                        }`}
                    >
                        {loading ? (
                            <span className="flex items-center justify-center">
                                <svg className="animate-spin -ml-1 mr-3 h-4 w-4 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                                    <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                                    <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                                </svg>
                                Procesando...
                            </span>
                        ) : success ? (
                            '‚úÖ Pago completado'                        ) : (
                            'üîÑ Redirigir a Khipu'
                        )}
                    </button>

                    {loading && (
                        <button
                            type="button"
                            onClick={restartPayment}
                            className="px-4 py-3 bg-yellow-600 text-white rounded-md hover:bg-yellow-700 transition-colors"
                            title="Reiniciar pago"
                        >
                            üîÑ
                        </button>
                    )}
                </div>            </form>

            {paymentResult && (
                <div className="mt-4 p-4 bg-blue-50 border border-blue-200 rounded-lg">
                    <h3 className="font-medium text-blue-900 mb-2">üìã Detalles del pago:</h3>
                    <ul className="text-sm text-blue-700 space-y-1">
                        <li>‚Ä¢ ID: {paymentResult.operationId}</li>
                        <li>‚Ä¢ Estado: {paymentResult.result}</li>
                        {paymentResult.continueUrl && (
                            <li>‚Ä¢ <a href={paymentResult.continueUrl} className="underline">Continuar pago</a></li>
                        )}
                    </ul>
                </div>
            )}
        </div>
    );
}
